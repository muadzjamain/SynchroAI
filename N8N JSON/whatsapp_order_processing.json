{
  "name": "WhatsApp Order Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "text",
        "url": "=https://api.twilio.com/2010-04-01/Accounts/{{$env.TWILIO_ACCOUNT_SID}}/Messages.json",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "whatsapp-order-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract WhatsApp message data and service ID from webhook payload\nconst data = $input.item.json;\n\n// Extract the WhatsApp number that sent the message\nconst fromNumber = data.From.replace('whatsapp:', '');\n\n// Extract the message content\nconst messageBody = data.Body;\n\n// Extract the service ID from the To number or use a lookup mechanism\n// This is a simplified example - you might need a more complex lookup\nconst toNumber = data.To.replace('whatsapp:', '');\n\n// In a real implementation, you would query Firestore to find which service\n// this WhatsApp number belongs to. For this example, we'll use a placeholder.\nconst serviceId = \"{{$env.DEFAULT_SERVICE_ID}}\";\n\nreturn {\n  fromNumber,\n  toNumber,\n  messageBody,\n  serviceId,\n  timestamp: new Date().toISOString(),\n  rawData: data\n};"
      },
      "id": "b8a1c3d5-7e6f-4a2b-9c3d-5e7f8a9b0c1d",
      "name": "Extract Message Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "projectId": "={{ $env.FIREBASE_PROJECT_ID }}",
        "credentials": {
          "serviceAccount": "={{ $env.FIREBASE_SERVICE_ACCOUNT_KEY }}"
        },
        "operation": "get",
        "collection": "services",
        "documentId": "={{ $node[\"Extract Message Data\"].json.serviceId }}"
      },
      "id": "c1d2e3f4-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
      "name": "Get Service Data",
      "type": "n8n-nodes-base.firestore",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract and format the required fields from Firestore data\nconst serviceData = $input.item.json;\nconst messageData = $node[\"Extract Message Data\"].json;\n\n// Format date according to user's preference: \"Month DD, YYYY (h:mmam/pm)\"\nconst now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst ampm = hours >= 12 ? 'pm' : 'am';\nconst formattedHours = hours % 12 || 12; // Convert 0 to 12 for 12 AM\nconst formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst formattedDate = `${months[now.getMonth()]} ${now.getDate()}, ${now.getFullYear()} (${formattedHours}:${formattedMinutes}${ampm})`;\n\nreturn {\n  // Service data\n  businessName: serviceData.businessName,\n  email: serviceData.email,\n  whatsappNumber: serviceData.whatsappNumber,\n  businessWebsite: serviceData.businessWebsite || \"Not provided\",\n  aiRole: serviceData.aiRole || \"Order Processing Assistant\",\n  catalogData: serviceData.productCatalog || [],\n  aiTone: serviceData.aiTone || \"Professional\",\n  paymentMethods: serviceData.paymentMethods || [],\n  gmailNotificationPreference: serviceData.receiveEmails || \"yes\",\n  \n  // Message data\n  customerNumber: messageData.fromNumber,\n  messageContent: messageData.messageBody,\n  receivedAt: formattedDate,\n  \n  // Include IDs for reference\n  serviceId: messageData.serviceId,\n  \n  // Include raw data for debugging\n  rawServiceData: serviceData,\n  rawMessageData: messageData.rawData\n};"
      },
      "id": "d1e2f3a4-b5c6-7d8e-9f0a-1b2c3d4e5f6a",
      "name": "Prepare Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Determine if this is a new conversation or continuing one\nconst data = $input.item.json;\n\n// Check if we have an active session for this customer\n// In a real implementation, you would query Firestore to check for active sessions\n// For this example, we'll use a simple keyword detection\n\nconst messageContent = data.messageContent.toLowerCase();\nconst isNewOrder = messageContent.includes('order') || \n                  messageContent.includes('buy') || \n                  messageContent.includes('purchase');\n\nconst isCheckout = messageContent.includes('checkout') || \n                  messageContent.includes('pay') || \n                  messageContent.includes('complete order');\n\nconst isCancel = messageContent.includes('cancel') || \n                messageContent.includes('stop');\n\nlet conversationState = \"initial\";\nif (isCheckout) {\n  conversationState = \"checkout\";\n} else if (isCancel) {\n  conversationState = \"cancel\";\n} else if (isNewOrder) {\n  conversationState = \"new_order\";\n} else {\n  conversationState = \"continue\";\n}\n\nreturn {\n  ...data,\n  conversationState,\n  isNewOrder,\n  isCheckout,\n  isCancel\n};"
      },
      "id": "e1f2a3b4-c5d6-7e8f-9a0b-1c2d3e4f5a6b",
      "name": "Determine Conversation State",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "prompt": {
          "text": "=You are an AI assistant for {{$node[\"Determine Conversation State\"].json.businessName}}. Your role is to help customers place orders via WhatsApp.\n\nYou should respond in a {{$node[\"Determine Conversation State\"].json.aiTone}} tone.\n\nThe customer has sent the following message via WhatsApp:\n\"{{$node[\"Determine Conversation State\"].json.messageContent}}\"\n\nBased on our analysis, the customer appears to be: {{$node[\"Determine Conversation State\"].json.conversationState === \"new_order\" ? \"starting a new order\" : $node[\"Determine Conversation State\"].json.conversationState === \"checkout\" ? \"ready to checkout\" : $node[\"Determine Conversation State\"].json.conversationState === \"cancel\" ? \"wanting to cancel\" : \"continuing a conversation\"}}\n\nAvailable payment methods: {{$node[\"Determine Conversation State\"].json.paymentMethods.join(\", \")}}\n\nPlease provide a helpful response to guide the customer through the ordering process. If they're starting a new order, ask for details about what they want to order. If they're ready to checkout, guide them through the payment process using one of the available payment methods. If they want to cancel, confirm the cancellation.\n\nKeep your response concise and suitable for WhatsApp."
        },
        "options": {
          "model": "gpt-4"
        }
      },
      "id": "f1a2b3c4-d5e6-f7a8-b9c0-d1e2f3a4b5c6",
      "name": "OpenAI",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "text",
        "url": "=https://api.twilio.com/2010-04-01/Accounts/{{$env.TWILIO_ACCOUNT_SID}}/Messages.json",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "From",
              "value": "=whatsapp:+{{$node[\"Determine Conversation State\"].json.whatsappNumber}}"
            },
            {
              "name": "To",
              "value": "=whatsapp:+{{$node[\"Determine Conversation State\"].json.customerNumber}}"
            },
            {
              "name": "Body",
              "value": "={{$node[\"OpenAI\"].json.text}}"
            }
          ]
        },
        "options": {}
      },
      "id": "g1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
      "name": "Send WhatsApp Reply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$node[\"Determine Conversation State\"].json.conversationState}}",
              "operation": "equals",
              "value2": "checkout"
            }
          ]
        }
      },
      "id": "h1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6",
      "name": "IF (Checkout)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1560,
        460
      ]
    },
    {
      "parameters": {
        "projectId": "={{ $env.FIREBASE_PROJECT_ID }}",
        "credentials": {
          "serviceAccount": "={{ $env.FIREBASE_SERVICE_ACCOUNT_KEY }}"
        },
        "operation": "add",
        "collection": "orders",
        "options": {
          "document": {
            "serviceId": "={{$node[\"Determine Conversation State\"].json.serviceId}}",
            "customerNumber": "={{$node[\"Determine Conversation State\"].json.customerNumber}}",
            "orderDetails": "={{$node[\"Determine Conversation State\"].json.messageContent}}",
            "status": "pending",
            "createdAt": "={{$json[\"firebase\"].serverTimestamp()}}",
            "formattedCreatedAt": "={{$node[\"Determine Conversation State\"].json.receivedAt}}"
          }
        }
      },
      "id": "i1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
      "name": "Create Order",
      "type": "n8n-nodes-base.firestore",
      "typeVersion": 1,
      "position": [
        1780,
        460
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{$env.NOTIFICATION_EMAIL}}",
        "toEmail": "={{$node[\"Determine Conversation State\"].json.email}}",
        "subject": "=New Order Received - {{$node[\"Determine Conversation State\"].json.businessName}} - {{$node[\"Determine Conversation State\"].json.receivedAt}}",
        "text": "=A new order has been received via your SynchroAI WhatsApp Order service.\n\nBusiness: {{$node[\"Determine Conversation State\"].json.businessName}}\nReceived: {{$node[\"Determine Conversation State\"].json.receivedAt}}\nFrom: {{$node[\"Determine Conversation State\"].json.customerNumber}}\n\nOrder Details:\n\"{{$node[\"Determine Conversation State\"].json.messageContent}}\"\n\nPlease Sign in to your SynchroAI dashboard to process this order.\n\nThis is an automated notification from SynchroAI.",
        "options": {}
      },
      "id": "j1e2f3g4-h5i6-j7k8-l9m0-n1o2p3q4r5s6",
      "name": "Send Order Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2000,
        460
      ]
    },
    {
      "parameters": {
        "projectId": "={{ $env.FIREBASE_PROJECT_ID }}",
        "credentials": {
          "serviceAccount": "={{ $env.FIREBASE_SERVICE_ACCOUNT_KEY }}"
        },
        "operation": "add",
        "collection": "conversations",
        "options": {
          "document": {
            "serviceId": "={{$node[\"Determine Conversation State\"].json.serviceId}}",
            "customerNumber": "={{$node[\"Determine Conversation State\"].json.customerNumber}}",
            "messageContent": "={{$node[\"Determine Conversation State\"].json.messageContent}}",
            "aiResponse": "={{$node[\"OpenAI\"].json.text}}",
            "conversationState": "={{$node[\"Determine Conversation State\"].json.conversationState}}",
            "timestamp": "={{$node[\"Determine Conversation State\"].json.receivedAt}}",
            "createdAt": "={{$json[\"firebase\"].serverTimestamp()}}"
          }
        }
      },
      "id": "k1f2g3h4-i5j6-k7l8-m9n0-o1p2q3r4s5t6",
      "name": "Log Conversation",
      "type": "n8n-nodes-base.firestore",
      "typeVersion": 1,
      "position": [
        1780,
        300
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message Data": {
      "main": [
        [
          {
            "node": "Get Service Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Service Data": {
      "main": [
        [
          {
            "node": "Prepare Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Data": {
      "main": [
        [
          {
            "node": "Determine Conversation State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Determine Conversation State": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF (Checkout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Send WhatsApp Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp Reply": {
      "main": [
        [
          {
            "node": "Log Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF (Checkout)": {
      "main": [
        [
          {
            "node": "Create Order",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Create Order": {
      "main": [
        [
          {
            "node": "Send Order Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "name": "SynchroAI"
    },
    {
      "name": "WhatsApp"
    },
    {
      "name": "Orders"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-05-15T14:16:28.000Z",
  "versionId": "3456cdef-7890-12gh-ijkl-mnopqrstuvwx"
}
