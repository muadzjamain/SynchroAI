{
  "name": "WhatsApp Business API Integration",
  "nodes": [
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "text",
        "url": "=https://{{$env.WHATSAPP_API_DOMAIN}}/v1/webhooks/incoming",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "name": "WhatsApp Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "whatsapp-business-webhook"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "customerNumber",
              "value": "={{ $json.entry[0].changes[0].value.messages[0].from }}"
            },
            {
              "name": "businessNumber",
              "value": "={{ $json.entry[0].changes[0].value.metadata.display_phone_number }}"
            },
            {
              "name": "messageContent",
              "value": "={{ $json.entry[0].changes[0].value.messages[0].text.body }}"
            },
            {
              "name": "messageId",
              "value": "={{ $json.entry[0].changes[0].value.messages[0].id }}"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.entry[0].changes[0].value.messages[0].timestamp }}"
            },
            {
              "name": "formattedTimestamp",
              "value": "={{ $jmespath($json, '`May 15, 2025 (2:40pm)`') }}"
            }
          ],
          "object": [
            {
              "name": "rawData",
              "value": "={{ $json }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6",
      "name": "Extract WhatsApp Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "projectId": "={{ $env.FIREBASE_PROJECT_ID }}",
        "credentials": {
          "serviceAccount": "={{ $env.FIREBASE_SERVICE_ACCOUNT_KEY }}"
        },
        "operation": "find",
        "collection": "services",
        "options": {
          "where": [
            {
              "field": "whatsappNumber",
              "operator": "==",
              "value": "={{ $node[\"Extract WhatsApp Data\"].json.businessNumber }}"
            },
            {
              "field": "status",
              "operator": "==",
              "value": "active"
            }
          ],
          "limit": 1
        }
      },
      "id": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
      "name": "Find Service by WhatsApp Number",
      "type": "n8n-nodes-base.firestore",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process the Firestore query results\nconst data = $input.item.json;\nconst whatsappData = $node[\"Extract WhatsApp Data\"].json;\n\n// Check if we found a matching service\nlet serviceFound = false;\nlet serviceId = '';\nlet serviceType = '';\nlet businessName = '';\nlet aiSystemPrompt = '';\n\nif (data && data.length > 0) {\n  const service = data[0];\n  serviceFound = true;\n  serviceId = service.id || '';\n  serviceType = service.type || '';\n  businessName = service.businessName || 'Business';\n  aiSystemPrompt = service.aiSystemPrompt || '';\n}\n\nreturn {\n  ...whatsappData,\n  serviceFound,\n  serviceId,\n  serviceType,\n  businessName,\n  aiSystemPrompt\n};"
      },
      "id": "d1e2f3g4-h5i6-j7k8-l9m0-n1o2p3q4r5s6",
      "name": "Process Service Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $node[\"Process Service Data\"].json.serviceFound }}",
              "value2": true
            }
          ]
        }
      },
      "id": "e1f2g3h4-i5j6-k7l8-m9n0-o1p2q3r4s5t6",
      "name": "IF (Service Found)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={{$env.GEMINI_API_KEY}}",
        "httpOptions": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "contents",
              "value": "=[{\"role\":\"user\",\"parts\":[{\"text\":\"{{$node[\"Process Service Data\"].json.messageContent}}\"}]}]"
            },
            {
              "name": "systemInstruction",
              "value": "={\"parts\":[{\"text\":\"{{$node[\"Process Service Data\"].json.aiSystemPrompt}}\"}]}"
            },
            {
              "name": "generationConfig",
              "value": "={\"temperature\":0.2,\"maxOutputTokens\":1024,\"topK\":40,\"topP\":0.95}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "f1g2h3i4-j5k6-l7m8-n9o0-p1q2r3s4t5u6",
      "name": "Generate AI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1340,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate a default response when no service is found\nconst data = $node[\"Process Service Data\"].json;\n\n// Format date according to user's preference: \"Month DD, YYYY (h:mmam/pm)\"\nconst now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst ampm = hours >= 12 ? 'pm' : 'am';\nconst formattedHours = hours % 12 || 12; // Convert 0 to 12 for 12 AM\nconst formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst formattedDate = `${months[now.getMonth()]} ${now.getDate()}, ${now.getFullYear()} (${formattedHours}:${formattedMinutes}${ampm})`;\n\n// Create a default response\nconst defaultResponse = {\n  body: {\n    candidates: [\n      {\n        content: {\n          parts: [\n            {\n              text: \"I'm sorry, but this WhatsApp number is not associated with an active service. Please contact the service provider for assistance.\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n};\n\nreturn {\n  ...data,\n  body: defaultResponse.body,\n  generatedAt: formattedDate\n};"
      },
      "id": "g1h2i3j4-k5l6-m7n8-o9p0-q1r2s3t4u5v6",
      "name": "Generate Default Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process the AI response\nconst data = $input.item.json;\nconst serviceData = $node[\"Process Service Data\"].json;\nconst apiResponse = data.body;\n\n// Extract the generated text from the response\nlet responseText = '';\n\ntry {\n  if (apiResponse && \n      apiResponse.candidates && \n      apiResponse.candidates.length > 0 && \n      apiResponse.candidates[0].content && \n      apiResponse.candidates[0].content.parts && \n      apiResponse.candidates[0].content.parts.length > 0) {\n    \n    responseText = apiResponse.candidates[0].content.parts[0].text;\n  } else {\n    responseText = \"I'm sorry, but I couldn't generate a response at this time. Please try again later.\";\n  }\n} catch (e) {\n  responseText = \"I'm sorry, but I encountered an error while processing your message. Please try again later.\";\n}\n\n// Format date according to user's preference: \"Month DD, YYYY (h:mmam/pm)\"\nconst now = new Date();\nconst hours = now.getHours();\nconst minutes = now.getMinutes();\nconst ampm = hours >= 12 ? 'pm' : 'am';\nconst formattedHours = hours % 12 || 12; // Convert 0 to 12 for 12 AM\nconst formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst formattedDate = `${months[now.getMonth()]} ${now.getDate()}, ${now.getFullYear()} (${formattedHours}:${formattedMinutes}${ampm})`;\n\nreturn {\n  customerNumber: serviceData.customerNumber,\n  businessNumber: serviceData.businessNumber,\n  businessName: serviceData.businessName,\n  serviceId: serviceData.serviceId,\n  serviceType: serviceData.serviceType,\n  customerMessage: serviceData.messageContent,\n  aiResponse: responseText,\n  messageId: serviceData.messageId,\n  timestamp: serviceData.timestamp,\n  formattedTimestamp: serviceData.formattedTimestamp,\n  responseGeneratedAt: formattedDate\n};"
      },
      "id": "h1i2j3k4-l5m6-n7o8-p9q0-r1s2t3u4v5w6",
      "name": "Prepare WhatsApp Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://{{$env.WHATSAPP_API_DOMAIN}}/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "bearer",
        "genericAuthTypeBearer": "={{$env.WHATSAPP_API_TOKEN}}",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messaging_product",
              "value": "whatsapp"
            },
            {
              "name": "recipient_type",
              "value": "individual"
            },
            {
              "name": "to",
              "value": "={{$node[\"Prepare WhatsApp Response\"].json.customerNumber}}"
            },
            {
              "name": "type",
              "value": "text"
            },
            {
              "name": "text",
              "value": "={\"preview_url\":false,\"body\":\"{{$node[\"Prepare WhatsApp Response\"].json.aiResponse}}\"}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "i1j2k3l4-m5n6-o7p8-q9r0-s1t2u3v4w5x6",
      "name": "Send WhatsApp Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "projectId": "={{ $env.FIREBASE_PROJECT_ID }}",
        "credentials": {
          "serviceAccount": "={{ $env.FIREBASE_SERVICE_ACCOUNT_KEY }}"
        },
        "operation": "add",
        "collection": "conversations",
        "options": {
          "document": {
            "serviceId": "={{$node[\"Prepare WhatsApp Response\"].json.serviceId}}",
            "customerNumber": "={{$node[\"Prepare WhatsApp Response\"].json.customerNumber}}",
            "messageContent": "={{$node[\"Prepare WhatsApp Response\"].json.customerMessage}}",
            "aiResponse": "={{$node[\"Prepare WhatsApp Response\"].json.aiResponse}}",
            "messageId": "={{$node[\"Prepare WhatsApp Response\"].json.messageId}}",
            "timestamp": "={{$node[\"Prepare WhatsApp Response\"].json.formattedTimestamp}}",
            "createdAt": "={{$json[\"firebase\"].serverTimestamp()}}"
          }
        }
      },
      "id": "j1k2l3m4-n5o6-p7q8-r9s0-t1u2v3w4x5y6",
      "name": "Log Conversation",
      "type": "n8n-nodes-base.firestore",
      "typeVersion": 1,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"Process Service Data\"].json.serviceType }}",
              "operation": "equals",
              "value2": "whatsapp-order"
            }
          ]
        }
      },
      "id": "k1l2m3n4-o5p6-q7r8-s9t0-u1v2w3x4y5z6",
      "name": "IF (Order Service)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2000,
        460
      ]
    },
    {
      "parameters": {
        "jsCode": "// Check if this message contains order intent\nconst data = $node[\"Prepare WhatsApp Response\"].json;\n\n// Simple keyword detection for order intent\nconst messageContent = data.customerMessage.toLowerCase();\nconst orderKeywords = ['order', 'buy', 'purchase', 'checkout', 'payment', 'pay'];\n\n// Check if any order keywords are present\nconst hasOrderIntent = orderKeywords.some(keyword => messageContent.includes(keyword));\n\nreturn {\n  ...data,\n  hasOrderIntent\n};"
      },
      "id": "l1m2n3o4-p5q6-r7s8-t9u0-v1w2x3y4z5a6",
      "name": "Detect Order Intent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2220,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $node[\"Detect Order Intent\"].json.hasOrderIntent }}",
              "value2": true
            }
          ]
        }
      },
      "id": "m1n2o3p4-q5r6-s7t8-u9v0-w1x2y3z4a5b6",
      "name": "IF (Has Order Intent)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2440,
        400
      ]
    },
    {
      "parameters": {
        "projectId": "={{ $env.FIREBASE_PROJECT_ID }}",
        "credentials": {
          "serviceAccount": "={{ $env.FIREBASE_SERVICE_ACCOUNT_KEY }}"
        },
        "operation": "add",
        "collection": "orders",
        "options": {
          "document": {
            "serviceId": "={{$node[\"Detect Order Intent\"].json.serviceId}}",
            "customerNumber": "={{$node[\"Detect Order Intent\"].json.customerNumber}}",
            "orderDetails": "={{$node[\"Detect Order Intent\"].json.customerMessage}}",
            "status": "pending",
            "createdAt": "={{$json[\"firebase\"].serverTimestamp()}}",
            "formattedCreatedAt": "={{$node[\"Detect Order Intent\"].json.formattedTimestamp}}"
          }
        }
      },
      "id": "n1o2p3q4-r5s6-t7u8-v9w0-x1y2z3a4b5c6",
      "name": "Create Order",
      "type": "n8n-nodes-base.firestore",
      "typeVersion": 1,
      "position": [
        2660,
        340
      ]
    },
    {
      "parameters": {
        "fromEmail": "={{$env.NOTIFICATION_EMAIL}}",
        "toEmail": "={{$env.ADMIN_EMAIL}}",
        "subject": "=New Order Received - {{ $node[\"Detect Order Intent\"].json.businessName }} - {{ $node[\"Detect Order Intent\"].json.formattedTimestamp }}",
        "text": "=A new order has been received via WhatsApp.\n\nBusiness: {{ $node[\"Detect Order Intent\"].json.businessName }}\nReceived: {{ $node[\"Detect Order Intent\"].json.formattedTimestamp }}\nFrom: {{ $node[\"Detect Order Intent\"].json.customerNumber }}\n\nOrder Details:\n\"{{ $node[\"Detect Order Intent\"].json.customerMessage }}\"\n\nAI Response:\n\"{{ $node[\"Detect Order Intent\"].json.aiResponse }}\"\n\nPlease Sign in to the SynchroAI dashboard to process this order.\n\nThis is an automated notification from SynchroAI.",
        "options": {}
      },
      "id": "o1p2q3r4-s5t6-u7v8-w9x0-y1z2a3b4c5d6",
      "name": "Send Order Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2660,
        460
      ]
    }
  ],
  "connections": {
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "Extract WhatsApp Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract WhatsApp Data": {
      "main": [
        [
          {
            "node": "Find Service by WhatsApp Number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Service by WhatsApp Number": {
      "main": [
        [
          {
            "node": "Process Service Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Service Data": {
      "main": [
        [
          {
            "node": "IF (Service Found)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF (Service Found)": {
      "main": [
        [
          {
            "node": "Generate AI Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Default Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Response": {
      "main": [
        [
          {
            "node": "Prepare WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Default Response": {
      "main": [
        [
          {
            "node": "Prepare WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare WhatsApp Response": {
      "main": [
        [
          {
            "node": "Send WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp Response": {
      "main": [
        [
          {
            "node": "Log Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Conversation": {
      "main": [
        [
          {
            "node": "IF (Order Service)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF (Order Service)": {
      "main": [
        [
          {
            "node": "Detect Order Intent",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Detect Order Intent": {
      "main": [
        [
          {
            "node": "IF (Has Order Intent)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF (Has Order Intent)": {
      "main": [
        [
          {
            "node": "Create Order",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Order Notification",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [
    {
      "name": "SynchroAI"
    },
    {
      "name": "WhatsApp"
    },
    {
      "name": "API"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-05-15T14:33:29.000Z",
  "versionId": "8901hijk-2345-67lm-nopq-rstuvwxyzabc"
}
