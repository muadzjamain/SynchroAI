// Main JavaScript for SynchroAI

// Firebase Configuration is loaded from env-config.js
// The configuration is dynamically generated by the server using environment variables

// Initialize Firebase - this will be done after config is loaded
let auth;
let db;

// Check if Firebase is already initialized
function initializeFirebaseIfNeeded() {
  if (typeof firebase !== 'undefined' && window.firebaseConfig) {
    if (!firebase.apps.length) {
      firebase.initializeApp(window.firebaseConfig);
      console.log('Firebase initialized from main.js');
    }
    auth = firebase.auth();
    // Set persistence to LOCAL to keep the user logged in even when the browser is closed
    auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL)
      .then(() => {
        console.log('Firebase persistence set to LOCAL');
      })
      .catch((error) => {
        console.error('Error setting persistence:', error);
      });
      
    db = firebase.firestore();
    setupAuthObserver();
    return true;
  }
  return false;
}

// Try to initialize immediately if config is already loaded
if (!initializeFirebaseIfNeeded()) {
  // If not initialized, wait for the configuration to be loaded
  console.log('Waiting for Firebase configuration to load...');
  
  // Use the onFirebaseConfigReady function if available
  if (window.onFirebaseConfigReady) {
    window.onFirebaseConfigReady(initializeFirebaseIfNeeded);
  } else {
    // Fallback to setTimeout if onFirebaseConfigReady is not available
    setTimeout(initializeFirebaseIfNeeded, 500);
  }
}

// Authentication state observer function
function setupAuthObserver() {
  auth.onAuthStateChanged(user => {
    if (user) {
      // User is signed in
      console.log("User is signed in:", user.email);
      
      // Update all auth-dependent UI elements
      document.querySelectorAll('.auth-user').forEach(el => {
        el.style.display = 'block';
      });
      document.querySelectorAll('.auth-guest').forEach(el => {
        el.style.display = 'none';
      });
      
      // Update username in nav dropdown and other places
      const navUsername = document.getElementById('navUsername');
      if (navUsername) {
        navUsername.textContent = user.displayName || user.email;
      }
      
      // Update user dropdown (for older pages using this format)
      const userDropdown = document.getElementById('userDropdown');
      if (userDropdown) {
        const userSpan = userDropdown.querySelector('span');
        if (userSpan) {
          userSpan.textContent = user.displayName || user.email;
        }
      }
      
      // Page-specific actions for authenticated users
      const currentPage = window.location.pathname.split('/').pop() || 'index.html';
      
      // Display wallet balance in navigation for all pages
      loadUserWalletBalance(user.uid);
      
      // Profile page: Load user services
      if (currentPage.includes('profile.html')) {
        loadUserServices(user.uid);
      }
      
      // Profile settings page has been removed
      
      // Wallet page: Load wallet balance for the main wallet section
      if (currentPage.includes('wallet.html')) {
        const userWalletBalance = document.getElementById('userWalletBalance');
        if (userWalletBalance && typeof fetchUserWalletBalance === 'function') {
          fetchUserWalletBalance(user.uid);
        }
      }
    } else {
      // User is signed out
      console.log("User is signed out");
      document.querySelectorAll('.auth-user').forEach(el => {
        el.style.display = 'none';
      });
      document.querySelectorAll('.auth-guest').forEach(el => {
        el.style.display = 'block';
      });
      
      // Redirect to login page if on protected page
      const protectedPages = [
        'profile.html', 
        'wallet.html', 
        'payment.html',
        'wallet-success.html'
      ];
      
      const currentPage = window.location.pathname.split('/').pop() || 'index.html';
      
      // Check if current page is protected
      let isProtected = false;
      for (const page of protectedPages) {
        if (currentPage.includes(page)) {
          isProtected = true;
          break;
        }
      }
      
      if (isProtected) {
        console.log(`Redirecting from protected page ${currentPage} to login.html`);
        // Store the page user was trying to access for redirecting back after login
        sessionStorage.setItem('redirect_after_login', window.location.href);
        window.location.href = 'login.html';
      }
    }
  });
}

// Sign Up Function
function signUp(email, password) {
  return auth.createUserWithEmailAndPassword(email, password)
    .then((userCredential) => {
      // Create user document in Firestore
      return db.collection('users').doc(userCredential.user.uid).set({
        email: email,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      });
    })
    .catch((error) => {
      console.error("Error signing up:", error);
      throw error;
    });
}

// Sign In Function
function signIn(email, password) {
  return auth.signInWithEmailAndPassword(email, password)
    .then((userCredential) => {
      // Check if there's a redirect URL stored
      const redirectUrl = sessionStorage.getItem('redirect_after_login');
      if (redirectUrl) {
        // Clear the stored URL
        sessionStorage.removeItem('redirect_after_login');
        // Redirect the user
        console.log('Redirecting to:', redirectUrl);
        window.location.href = redirectUrl;
        return new Promise(resolve => setTimeout(() => resolve(userCredential), 100));
      }
      return userCredential;
    })
    .catch((error) => {
      console.error("Error signing in:", error);
      throw error;
    });
}

// Sign In With Google Function
function signInWithGoogle() {
  const provider = new firebase.auth.GoogleAuthProvider();
  return auth.signInWithPopup(provider)
    .then((result) => {
      // Check if user document exists, if not create it
      const user = result.user;
      const userRef = db.collection('users').doc(user.uid);
      
      return userRef.get().then((doc) => {
        if (!doc.exists) {
          return userRef.set({
            email: user.email,
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
          });
        }
      }).then(() => {
        // Check if there's a redirect URL stored
        const redirectUrl = sessionStorage.getItem('redirect_after_login');
        if (redirectUrl) {
          // Clear the stored URL
          sessionStorage.removeItem('redirect_after_login');
          // Redirect the user
          console.log('Redirecting after Google sign-in to:', redirectUrl);
          window.location.href = redirectUrl;
          return new Promise(resolve => setTimeout(() => resolve(result), 100));
        }
        return result;
      });
    })
    .catch((error) => {
      console.error("Error signing in with Google:", error);
      throw error;
    });
}

// Sign Out Function
function signOut() {
  return auth.signOut()
    .then(() => {
      window.location.href = 'index.html';
    })
    .catch((error) => {
      console.error("Error signing out:", error);
      throw error;
    });
}

// Load User Services for Profile Page
function loadUserServices() {
  const servicesContainer = document.getElementById('services-container');
  if (!servicesContainer) return;
  
  servicesContainer.innerHTML = '<p class="text-center">Loading your services...</p>';
  
  const user = auth.currentUser;
  if (!user) return;
  
  db.collection('services')
    .where('userId', '==', user.uid)
    .orderBy('createdAt', 'desc')
    .get()
    .then((querySnapshot) => {
      if (querySnapshot.empty) {
        servicesContainer.innerHTML = `
          <div class="text-center py-5">
            <p>You haven't purchased any AI services yet.</p>
            <a href="index.html" class="btn btn-primary">Browse Services</a>
          </div>
        `;
        return;
      }
      
      servicesContainer.innerHTML = '';
      
      querySnapshot.forEach((doc) => {
        const service = doc.data();
        const serviceId = doc.id;
        const createdDate = service.createdAt ? service.createdAt.toDate().toLocaleDateString() : 'N/A';
        
        const statusBadge = service.status === 'active' 
          ? '<span class="badge bg-success">Active</span>' 
          : '<span class="badge bg-warning text-dark">Paused</span>';
        
        const toggleButton = service.status === 'active'
          ? `<button class="btn btn-outline-warning btn-sm me-2" onclick="toggleServiceStatus('${serviceId}', 'paused')">Pause</button>`
          : `<button class="btn btn-outline-success btn-sm me-2" onclick="toggleServiceStatus('${serviceId}', 'active')">Activate</button>`;
        
        const serviceCard = `
          <div class="card mb-4 service-item">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h5 class="mb-1">${service.serviceName}</h5>
                  ${statusBadge}
                  <p class="text-muted small mb-0">Created on ${createdDate}</p>
                </div>
                <div>
                  <button class="btn btn-outline-primary btn-sm me-2" onclick="updateService('${serviceId}', '${service.serviceType}')">Update</button>
                  ${toggleButton}
                  <button class="btn btn-outline-danger btn-sm" onclick="confirmDeleteService('${serviceId}')">Delete</button>
                </div>
              </div>
            </div>
          </div>
        `;
        
        servicesContainer.innerHTML += serviceCard;
      });
    })
    .catch((error) => {
      console.error("Error loading services:", error);
      servicesContainer.innerHTML = `
        <div class="alert alert-danger">
          Error loading your services. Please try again later.
        </div>
      `;
    });
}

// Toggle Service Status (Active/Paused)
function toggleServiceStatus(serviceId, newStatus) {
  const user = auth.currentUser;
  if (!user) return;
  
  db.collection('services').doc(serviceId).update({
    status: newStatus,
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  })
  .then(() => {
    // Send update to n8n webhook
    const n8nWebhook = 'YOUR_N8N_WEBHOOK_URL'; // Replace with actual webhook URL
    
    fetch(n8nWebhook, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        action: 'status-change',
        serviceId: serviceId,
        status: newStatus,
        userId: user.uid
      })
    })
    .then(response => {
      console.log('Status update sent to n8n');
    })
    .catch(error => {
      console.error('Error sending status update to n8n:', error);
    });
    
    // Reload services
    loadUserServices();
  })
  .catch((error) => {
    console.error("Error updating service status:", error);
    alert("Error updating service status. Please try again.");
  });
}

// Update Service
function updateService(serviceId, serviceType) {
  // Redirect to the appropriate form page with the service ID
  window.location.href = `form-${serviceType}.html?id=${serviceId}`;
}

// Confirm Delete Service
function confirmDeleteService(serviceId) {
  if (confirm("Are you sure you want to delete this service? This action cannot be undone.")) {
    deleteService(serviceId);
  }
}

// Delete Service
function deleteService(serviceId) {
  const user = auth.currentUser;
  if (!user) return;
  
  db.collection('services').doc(serviceId).delete()
    .then(() => {
      // Send delete notification to n8n webhook
      const n8nWebhook = 'YOUR_N8N_WEBHOOK_URL'; // Replace with actual webhook URL
      
      fetch(n8nWebhook, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          action: 'delete',
          serviceId: serviceId,
          userId: user.uid
        })
      })
      .then(response => {
        console.log('Delete notification sent to n8n');
      })
      .catch(error => {
        console.error('Error sending delete notification to n8n:', error);
      });
      
      // Reload services
      loadUserServices();
    })
    .catch((error) => {
      console.error("Error deleting service:", error);
      alert("Error deleting service. Please try again.");
    });
}

// Submit Service Form
function submitServiceForm(serviceType, formData) {
  const user = auth.currentUser;
  if (!user) {
    window.location.href = 'login.html';
    return;
  }
  
  // Show confirmation dialog
  if (confirm('Are you sure you want to submit this form?')) {
    // Store form data in localStorage for payment process
    const serviceData = {
      serviceType: serviceType,
      formData: formData,
      timestamp: new Date().toISOString()
    };
    
    localStorage.setItem('pendingService', JSON.stringify(serviceData));
    
    // Redirect to payment page
    window.location.href = 'payment.html';
  }
}

// Process Payment
function processPayment(paymentMethodId) {
  const user = auth.currentUser;
  if (!user) {
    window.location.href = 'login.html';
    return;
  }
  
  // Get pending service data from localStorage
  const pendingService = JSON.parse(localStorage.getItem('pendingService'));
  if (!pendingService) {
    alert('No pending service found');
    window.location.href = 'index.html';
    return;
  }
  
  // Get price for service
  let price;
  let serviceName;
  switch (pendingService.serviceType) {
    case 'whatsapp-faq':
      price = 90.00;
      serviceName = 'WhatsApp FAQ AI Agent';
      break;
    case 'whatsapp-order':
      price = 125.00;
      serviceName = 'WhatsApp Order AI Agent';
      break;
    case 'custom-ai':
      price = 199.00; // Starting price for custom AI agent
      serviceName = 'Custom AI Agent';
      break;
    default:
      alert('Invalid service type');
      window.location.href = 'index.html';
      return;
  }
  
  // In a real application, this would make a call to your server to process the payment
  // For demo purposes, we'll simulate a successful payment
  
  // Create service record in Firestore
  db.collection('services').add({
    userId: user.uid,
    serviceType: pendingService.serviceType,
    serviceName: serviceName,
    formData: pendingService.formData,
    paymentAmount: price,
    status: 'active',
    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  })
  .then((docRef) => {
    // Send data to n8n webhook
    const n8nWebhook = 'YOUR_N8N_WEBHOOK_URL'; // Replace with actual webhook URL
    
    fetch(n8nWebhook, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        action: 'create',
        serviceId: docRef.id,
        userId: user.uid,
        serviceType: pendingService.serviceType,
        formData: pendingService.formData
      })
    })
    .then(response => {
      console.log('Service data sent to n8n');
    })
    .catch(error => {
      console.error('Error sending service data to n8n:', error);
    });
    
    // Clear pending service from localStorage
    localStorage.removeItem('pendingService');
    
    // Redirect to profile page
    window.location.href = 'profile.html';
  })
  .catch((error) => {
    console.error("Error creating service:", error);
    alert("Error processing payment. Please try again.");
  });
}

// Load Service Data for Update Form
function loadServiceForUpdate() {
  const urlParams = new URLSearchParams(window.location.search);
  const serviceId = urlParams.get('id');
  
  if (!serviceId) return;
  
  const user = auth.currentUser;
  if (!user) return;
  
  db.collection('services').doc(serviceId).get()
    .then((doc) => {
      if (doc.exists && doc.data().userId === user.uid) {
        const service = doc.data();
        
        // Populate form fields based on service type
        const formData = service.formData;
        
        for (const key in formData) {
          const element = document.getElementById(key);
          if (element) {
            if (element.type === 'checkbox') {
              element.checked = formData[key];
            } else {
              element.value = formData[key];
            }
          }
        }
        
        // Add submit handler for update
        const form = document.querySelector('form');
        if (form) {
          form.dataset.serviceId = serviceId;
          
          // Replace submit button text
          const submitButton = form.querySelector('button[type="submit"]');
          if (submitButton) {
            submitButton.textContent = 'Update';
          }
        }
      } else {
        alert('Service not found or you do not have permission to edit it');
        window.location.href = 'profile.html';
      }
    })
    .catch((error) => {
      console.error("Error loading service for update:", error);
      alert("Error loading service data. Please try again.");
    });
}

// Update Existing Service
function updateExistingService(serviceType, formData, serviceId) {
  const user = auth.currentUser;
  if (!user) return;
  
  db.collection('services').doc(serviceId).update({
    formData: formData,
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  })
  .then(() => {
    // Send update to n8n webhook
    const n8nWebhook = 'YOUR_N8N_WEBHOOK_URL'; // Replace with actual webhook URL
    
    fetch(n8nWebhook, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        action: 'update',
        serviceId: serviceId,
        userId: user.uid,
        serviceType: serviceType,
        formData: formData
      })
    })
    .then(response => {
      console.log('Service update sent to n8n');
    })
    .catch(error => {
      console.error('Error sending service update to n8n:', error);
    });
    
    // Redirect to profile page
    window.location.href = 'profile.html';
  })
  .catch((error) => {
    console.error("Error updating service:", error);
    alert("Error updating service. Please try again.");
  });
}

// Document Ready Handler
document.addEventListener('DOMContentLoaded', function() {
  // Sign out button
  const signOutBtn = document.getElementById('sign-out');
  if (signOutBtn) {
    signOutBtn.addEventListener('click', function(e) {
      e.preventDefault();
      signOut();
    });
  }

  // Handle sign in form
  const signInForm = document.getElementById('login-form');
  if (signInForm) {
    signInForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      const submitBtn = document.getElementById('sign-in-btn');
      const originalText = submitBtn.textContent;
      
      submitBtn.disabled = true;
      submitBtn.textContent = 'Signing in...';
      
      signIn(email, password)
        .then(() => {
          // Redirect happens inside signIn function if needed
          // Otherwise, go to profile
          if (!sessionStorage.getItem('redirect_after_login')) {
            window.location.href = 'profile.html';
          }
        })
        .catch((error) => {
          alert(`Sign in failed: ${error.message}`);
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        });
    });
  }

  // Handle Google sign-in
  const googleSignInBtn = document.getElementById('google-signin');
  if (googleSignInBtn) {
    googleSignInBtn.addEventListener('click', function() {
      signInWithGoogle()
        .then(() => {
          // Redirect happens inside signInWithGoogle function if needed
          // Otherwise, go to profile
          if (!sessionStorage.getItem('redirect_after_login')) {
            window.location.href = 'profile.html';
          }
        })
        .catch((error) => {
          alert(`Google sign in failed: ${error.message}`);
        });
    });
  }

  // Handle signup form submission
  const signupForm = document.getElementById('signup-form');
  if (signupForm) {
    signupForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirm-password').value;
      
      if (password !== confirmPassword) {
        alert('Passwords do not match!');
        return;
      }
      
      // Show loading state
      const submitBtn = signupForm.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating account...';
      
      signUp(email, password)
        .then(() => {
          window.location.href = 'profile.html';
        })
        .catch((error) => {
          alert(`Sign up failed: ${error.message}`);
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
        });
    });
  }
  
  // Handle WhatsApp FAQ AI form submission
  const whatsappFaqForm = document.getElementById('whatsapp-faq-form');
  if (whatsappFaqForm) {
    whatsappFaqForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const businessName = document.getElementById('businessName').value;
      const whatsappNumber = document.getElementById('whatsappNumber').value;
      
      // Collect FAQ items
      const faqItems = [];
      const questionElements = document.querySelectorAll('.faq-question');
      const answerElements = document.querySelectorAll('.faq-answer');
      
      for (let i = 0; i < questionElements.length; i++) {
        faqItems.push({
          question: questionElements[i].value,
          answer: answerElements[i].value
        });
      }
      
      const formData = {
        businessName,
        whatsappNumber,
        faqItems
      };
      
      // Check if this is an update
      const serviceId = whatsappFaqForm.dataset.serviceId;
      if (serviceId) {
        updateExistingService('whatsapp-faq', formData, serviceId);
      } else {
        submitServiceForm('whatsapp-faq', formData);
      }
    });
    
    // Add FAQ item button
    const addFaqButton = document.getElementById('add-faq-btn');
    if (addFaqButton) {
      addFaqButton.addEventListener('click', function() {
        const faqContainer = document.getElementById('faq-container');
        const faqItemTemplate = document.getElementById('faq-item-template');
        
        const newFaqItem = faqItemTemplate.content.cloneNode(true);
        faqContainer.appendChild(newFaqItem);
        
        // Add event listener to remove button
        const removeButtons = document.querySelectorAll('.remove-faq-btn');
        const lastRemoveButton = removeButtons[removeButtons.length - 1];
        
        lastRemoveButton.addEventListener('click', function() {
          this.closest('.faq-item').remove();
        });
      });
    }
    
    // Check if this is an update form
    if (window.location.search.includes('id=')) {
      loadServiceForUpdate();
    }
  }
  
  // Handle WhatsApp Order AI form submission
  const whatsappOrderForm = document.getElementById('whatsapp-order-form');
  if (whatsappOrderForm) {
    whatsappOrderForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const businessName = document.getElementById('businessName').value;
      const whatsappNumber = document.getElementById('whatsappNumber').value;
      
      // Collect payment methods
      const paymentMethods = [];
      const paymentMethodCheckboxes = document.querySelectorAll('input[name="paymentMethod"]:checked');
      paymentMethodCheckboxes.forEach(checkbox => {
        paymentMethods.push(checkbox.value);
      });
      
      const paymentVerification = document.getElementById('paymentVerification').value;
      const orderTracking = document.getElementById('orderTracking').value;
      
      const formData = {
        businessName,
        whatsappNumber,
        paymentMethods,
        paymentVerification,
        orderTracking
      };
      
      // Check if this is an update
      const serviceId = whatsappOrderForm.dataset.serviceId;
      if (serviceId) {
        updateExistingService('whatsapp-order', formData, serviceId);
      } else {
        submitServiceForm('whatsapp-order', formData);
      }
    });
    
    // Check if this is an update form
    if (window.location.search.includes('id=')) {
      loadServiceForUpdate();
    }
  }
  
  // Handle Custom AI form submission
  const customAiForm = document.getElementById('custom-ai-form');
  if (customAiForm) {
    customAiForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const businessName = document.getElementById('businessName').value;
      const platformType = document.getElementById('platformType').value;
      const aiRequirements = document.getElementById('aiRequirements').value;
      const aiTone = document.getElementById('aiTone').value;
      const customResponses = document.getElementById('customResponses').value;
      const additionalFeatures = document.getElementById('additionalFeatures').value;
      
      const formData = {
        businessName,
        platformType,
        aiRequirements,
        aiTone,
        customResponses,
        additionalFeatures
      };
      
      // Check if this is an update
      const serviceId = customAiForm.dataset.serviceId;
      if (serviceId) {
        updateExistingService('custom-ai', formData, serviceId);
      } else {
        submitServiceForm('custom-ai', formData);
      }
    });
    
    // Check if this is an update form
    if (window.location.search.includes('id=')) {
      loadServiceForUpdate();
    }
  }
  
  // Handle payment form submission
  const paymentForm = document.getElementById('payment-form');
  if (paymentForm) {
    // Display service details and price
    const pendingService = JSON.parse(localStorage.getItem('pendingService'));
    if (pendingService) {
      let serviceName, price;
      
      switch (pendingService.serviceType) {
        case 'whatsapp-faq':
          serviceName = 'WhatsApp FAQ AI Agent';
          price = '$90';
          break;
        case 'whatsapp-order':
          serviceName = 'WhatsApp Order AI Agent';
          price = '$125';
          break;
        case 'custom-ai':
          serviceName = 'Custom AI Agent';
          price = '$199-$599';
          break;
      }
      
      document.getElementById('service-name').textContent = serviceName;
      document.getElementById('service-price').textContent = price;
    } else {
      // No pending service, redirect to homepage
      window.location.href = 'index.html';
    }
    
    paymentForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // In a real application, this would create a payment method with Stripe
      // For demo purposes, we'll simulate a payment method ID
      const paymentMethodId = 'pm_' + Math.random().toString(36).substr(2, 9);
      
      processPayment(paymentMethodId);
    });
  }
});
